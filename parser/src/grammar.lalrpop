use ::std::str::FromStr;

// TODO @mark: some optimizations are possible:
// * use string interning, for memory but also fast eq/hash
// * reclaim vecs (or other memory) used while parsing before turning into Box<[T]>
// * arena-allocate final types, possibly with smaller indices than usize

use ::tel_api::Identifier;
use ::tel_api::Type;
use ::tel_api::op::BinOpCode;

use crate::ast::AssignmentDest;
use crate::ast::AssignmentKw;
use crate::ast::Assignments;
use crate::ast::Ast;
use crate::ast::Block;
use crate::ast::Closure;
use crate::ast::Enum;
use crate::ast::EnumVariant;
use crate::ast::Expr;
use crate::ast::Invoke;
use crate::ast::Struct;
use crate::ast::UnaryOpCode;
use crate::ast::vec_and;

grammar;

// Note that whitespace must be explicitly skipped for the first 2 groups
match {
    // Match double quoted string literals
    r#"[ \t]*"[^"]*""# => DQSTR,
    //TODO @mark: is this second half correct?

    // Match single quoted string literals
    r#"[ \t]*('[^']*')"# => SQSTR,

    // Ignore line comments
    r#"#[^\r\n]*(\r\n|\n|\r)(\s|\n|\r)*"# => { },

    // Do not count NEWLINE token when preceded by ellipsis
    r#"[ \t]*\.{3}[ \t\n\r]*"# => { },
} else {
    // Periods have special lexing because a linebreak is allowed before
    r#"[ \t\n\r]*\."# => PERIOD,

    // Turn at least one semicolons and any number of newlines into a single token (without this they are skipped)
    r#";+[ \t]*( |\t|\n|\r|;)*"# => SEMICOLON,
} else {
    // Turn any remaining newlines (not preceded by semicolon, in previous rule) into a single token
    r#"[ \t]*(\n|\r)+"# => NEWLINE,

    // Disallow math without whitespace
    // TODO @mark: make sure all operators are here
    r#"[ \t]*[a-zA-Z0-9_]+[+\-*/%]"# => TOO_COMPLEX1,
    r#"[ \t]*[*/%][a-zA-Z0-9_]+"# => TOO_COMPLEX2,

    // Ignore any other whitespace (except newlines above)
    r#"[ \t]+"# => { },
    //TODO @mark: does this mean keywords can be concatenated? that is not desirable
} else {
    _
}
//TODO @mark: match 'a+b' as a special token so as to reject it for not having whitespace

End: () = { SEMICOLON, NEWLINE }
Br: () = { NEWLINE? }

pub Prog: Ast = {
    Br <bs:Statements> => Ast { blocks: bs.into_boxed_slice() },
}

// todo: guard statement

// This is the closest thing to a single 'statement'
BlockNode: Block = {
    <d:StructDecl> => Block::Struct(d),
    <d:EnumDecl> => Block::Enum(d),
    <a:Assigns> => Block::Assigns(a),
    <e:Returns> => Block::Return(e),
    <e:Expression> => Block::Expression(e),
}

Returns: Expr = {
    "return" <Expression>,
}

// precedence (though some may be warnings for being confusing):
//   1 + 2 == 3 or 4  => (1 + 2) == (3 or 4)
//   1 or 2 + 4  =>  1 or (2 + 4)
//   false or false == false or true  =>  false or (false == false) or true
// B: either Br if newlines are allowed, or () if not
// P: either BrPer is newlines are allowed, or () if not
Expression: Expr = {
    Conditional,
}

// TODO @mark: do if/for/while without "(..)" if possible

Conditional: Expr = {
    // could allow newline after `if` but I prefer not to
    "if" "(" <when:Expression> ")" "{" Br <yes:Statements> "}"
        <elif:("elif" "(" <Expression> ")" "{" Br <Statements> "}")*>
        <no:("else" "{" Br <Statements> "}")?> => {
            let mut conditions = elif;
            conditions.insert(0, (when, yes));
            Expr::If(
                conditions.into_iter().map(|(when, yes)| (when, yes.into_boxed_slice())).collect(),
                no.map(|s| s.into_boxed_slice()))
        },
    ForEach,
}

// TODO @mark: match/branch/select statement

// TODO @mark: use ~ or ~= for pattern matching? i.e. can do ~= by itself if irrefutable, and inside if/while if refutable

ForEach: Expr = {
    // could allow newline after `for` but I prefer not to
    "for" "(" <name:AssignDest> "in" <iter:Expression> ")" "{" Br <body:Statements> "}" =>
            Expr::ForEach(name, Box::new(iter), body.into_boxed_slice()),
    WhileLoop,
}

WhileLoop: Expr = {
    // could allow newline after `if` but I prefer not to
    "while" "(" <when:Expression> ")" "{" Br <body:Statements> "}" =>
            Expr::While(Box::new(when), body.into_boxed_slice()),
    BoolCombineExpr,
}

BoolCombineExpr: Expr = {
    <l:BoolCombineExpr> <o:BoolCombineOp> Br <r:BoolCompareExpr> => Expr::BinOp(o, Box::new(l), Box::new(r)),
    BoolCompareExpr,
}

BoolCompareExpr: Expr = {
    <l:BoolCompareExpr> <o:BoolCompareOp> Br <r:AddSubExpr> => Expr::BinOp(o, Box::new(l), Box::new(r)),
    AddSubExpr,
}

AddSubExpr: Expr = {
    <l:AddSubExpr> <op:AddSubOp> Br <r:MulDivExpr> => Expr::BinOp(op, Box::new(l), Box::new(r)),
    MulDivExpr,
}

AddSubOp: BinOpCode = {
    <"+"> => BinOpCode::Add,
    <"-"> => BinOpCode::Sub,
}

MulDivExpr: Expr = {
    <l:MulDivExpr> <op:MulDivOp> Br <r:DotExpr> => Expr::BinOp(op, Box::new(l), Box::new(r)),
    DotExpr,
}

MulDivOp: BinOpCode = {
    <"*"> => BinOpCode::Mul,
    <"/"> => BinOpCode::Div,
    <"%"> => BinOpCode::Modulo,
}

DotExpr: Expr = {
    <e:DotExpr> PERIOD <inv:InvokeExpr> => Expr::Dot(Box::new(e), inv),
    UnaryExpr,
}

UnaryExpr: Expr = {
    <op:UnaryOp> <e:Single> => Expr::UnaryOp(op, Box::new(e)),
    Single,
}

Single: Expr = {
    <s:DQSTR> => Expr::Text(s.to_string().into()),
    <s:SQSTR> => Expr::Text(s.to_string().into()),
    NumLit => Expr::Num(<>),
    <inv:InvokeExpr> => Expr::Invoke(inv),
    <f:Function> => Expr::Closure(f),
    "(" Br <e:BoolCombineExpr> ")" => e,
}

InvokeExpr: Invoke = {
    <iden:Iden> "(" Br <args:Comma<Expression>> ")" <位:Function?> => Invoke {
            iden,
            args: vec_and(args, 位.map(|f| Expr::Closure(f))).into_boxed_slice()
        },
    <iden:Iden> <位:Function?> => Invoke {
            iden,
            args: vec_and(Vec::with_capacity(1), 位.map(|f| Expr::Closure(f))).into_boxed_slice()
        },
    // TODO @mark: full functions
    // TODO @mark: should numbers also be supported, for tuples?
}

NumLit: f64 = <s:r"[0-9]+(\.[0-9]+)?"> => f64::from_str(s).unwrap();

StructDecl: Struct = {
    "struct" <n:Iden> <gens:GenericList> Br "{" Br <fs:Comma<FieldDecl>> "}" => Struct {
        iden: n,
        fields: fs,
        generics: gens,
    },
}

EnumDecl: Enum = {
    "enum" <n:Iden> <gens:GenericList> Br "{" Br <vs:Comma<EnumVariant>> "}" => Enum {
        iden: n,
        variants: vs.into_boxed_slice(),
        generics: gens,
    },
}

EnumVariant: EnumVariant = {
    <StructDecl> => EnumVariant::Struct(<>),
    <EnumDecl> => EnumVariant::Enum(<>),
    <TypeUse> => EnumVariant::Existing(<>),
}

//TODO @mark: is type inference possible in this context?
FieldDecl: (Identifier, Type) = {
    <n:Iden> ":" Br <t:TypeUse> => (n, t),
}

Assigns: Assignments = {
    <ds:AssignDestEq+> <e:Expression> => Assignments {
            dest: { ds.into_boxed_slice() },
            op: None,
            value: Box::new(e),
    },
    <d:UntypedAssignDest> <op:AssignModifier> <e:Expression> => Assignments {
        dest: { Box::new([d]) },
        op: Some(op),
        value: Box::new(e),
    },
}

AssignDestEq: AssignmentDest = {
    <d:AssignDest> "=" => d,
}

AssignDest: AssignmentDest = {
    <UntypedAssignDest>,
    <TypedAssignDest>,
}


UntypedAssignDest: AssignmentDest = {
    <kw:AssignmentKeyword?> <n:Iden> => AssignmentDest {
            kw: kw.unwrap_or(AssignmentKw::None),
            target: n,
            typ: None,
    },
}

TypedAssignDest: AssignmentDest = {
    <kw:AssignmentKeyword?> <n:Iden> ":" Br <t: TypeUse> => AssignmentDest {
            kw: kw.unwrap_or(AssignmentKw::None),
            target: n,
            typ: Some(t),
    },
}

AssignmentKeyword: AssignmentKw = {
    "outer" => AssignmentKw::Outer,
    "mut" => AssignmentKw::Mut,
    "local" => AssignmentKw::Local,
}

AssignModifier: BinOpCode = {
    // must treat modifier and equals as one token, because lookahead is at most 1 token
    "+=" => BinOpCode::Add,
    "-=" => BinOpCode::Sub,
    "*=" => BinOpCode::Mul,
    "/=" => BinOpCode::Div,
}

BoolCompareOp: BinOpCode = {
    "==" => BinOpCode::Eq,
    "!=" => BinOpCode::Neq,
    "<" => BinOpCode::Lt,
    ">" => BinOpCode::Gt,
    "<=" => BinOpCode::Le,
    ">=" => BinOpCode::Ge,
}

BoolCombineOp: BinOpCode = {
    "and" => BinOpCode::And,
    "or" => BinOpCode::Or,
    "xor" => BinOpCode::Xor,
}

UnaryOp: UnaryOpCode = {
    "!" => UnaryOpCode::Not,
    "-" => UnaryOpCode::Min,
}

Function: Closure = {
    <FullFunction>,
    <Lambda>,
}

FullFunction: Closure = {
    "fn" "(" <p:ParamList> ")" <r:(":" Br <TypeUse>)?> <f:FunctionBody> =>
        //TODO @mark: use `p`
        Closure { blocks: f, params: Box::new([]) },
}

Lambda: Closure = {
    <f:FunctionBody> => Closure { blocks: f, params: Box::new([]) },
}

FunctionBody: Box<[Block]> = {
    "{" Br <bs:Statements> "}" => bs.into_boxed_slice(),
}

ParamList: Box<[AssignmentDest]> = {
    <Comma<AssignDest>> => <>.into_boxed_slice(),
}

GenericList: Box<[AssignmentDest]> = {
    "<" Br <gens:Comma<AssignDest>> ">" => gens.into_boxed_slice(),
    () => Box::new([]),
}

TypeUse: Type = {
    <iden:Iden> <gen:("<" <Comma<TypeUse>> ">")?> => Type {
            iden,
            generics: gen.map(|v| v.into_boxed_slice()).unwrap_or_else(|| Box::new([])),
    },
}

// If this does not match, it may be a reserved keyword
Iden: Identifier = <s:r"([a-zA-Z]|_[a-zA-Z0-9])[a-zA-Z0-9_]*"> => Identifier::new(s).unwrap();

Comma<T>: Vec<T> = {
    <mut v:(<T> "," Br)*> <e:T> ","? Br => vec_and(v, Some(e)),
    () => Vec::new(),
}

Statements: Vec<Block> = {
    <mut v:(<BlockNode> End)*> <e:BlockNode?> => vec_and(v, e)
}

//TODO @mark: see if any rules are unused (is there a warning?)

